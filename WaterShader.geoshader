#version 400

layout (triangles) in;
layout (triangle_strip, max_vertices=3) out;

// Input vertex data, aggregated into triangles
in vec3 position_tes[];
in vec3 normal_tes[];
in vec3 eye_tes[];
in vec3 light_tes[];
in vec2 uv_tes[];

// Output data per vertex, passed to primitive assembly and rasterization
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec2 uv_gs;

// Uniform values that stay constant for the whole mesh.
uniform mat4 V;
uniform mat4 P;
uniform sampler2D displacementTexture;
uniform float time;

vec3 GetNormal(vec4 a, vec4 b, vec4 c)
{
   vec3 x = b.xyz - a.xyz;
   vec3 y = c.xyz - b.xyz;
   return normalize(cross(x, y));
}


vec3 Gerstner(vec3 worldpos, float w, float A, float phi, float Q, vec2 D, int N) {
	float Q_i = Q / (w * A * N);
    
	vec3 newPos;
    newPos.x = Q_i * A * D.x * cos(dot(w * D, worldpos.xz) + phi * time);
    newPos.y = A * sin(dot(w * D, worldpos.xz) + phi * time);
    newPos.z = Q_i * A * D.y * cos(dot(w * D, worldpos.xz) + phi * time);

	return newPos;
}


void main() {

	vec4 pos[3];

	for(int i = 0; i < 3; ++i) {
		pos[i] = vec4(position_tes[i], 1.0);

		pos[i] += vec4(Gerstner(position_tes[i], 4, 0.08, 1.1, 0.75, vec2(0.3, 0.6),4) ,1.0);
		pos[i] += vec4(Gerstner(position_tes[i], 2, 0.05, 1.1, 0.75, vec2(0.2, 0.866), 4), 1.0);
		pos[i] += vec4(Gerstner(position_tes[i], 0.6, 0.2, 0.4, 0.1, vec2(0.3, 0.7), 4), 1.0);
		pos[i] += vec4(Gerstner(position_tes[i], 0.9, 0.15 , 0.4, 0.1, vec2(0.8 , 0.1) , 4) , 1.0);

		float displacement = texture(displacementTexture, uv_tes[i]).x * 0.05;
		pos[i].y += displacement;
	}

	vec3 mynorm = GetNormal(pos[0], pos[1], pos[2]);

	for(int i = 0; i < 3; ++i) {
		gl_Position = P * V * pos[i];
        Normal_cameraspace = mynorm;

        EyeDirection_cameraspace = eye_tes[i];
        LightDirection_cameraspace = light_tes[i];
		uv_gs = uv_tes[i];
        
		EmitVertex();
	}
	EndPrimitive();

}

