#version 400

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;

// Output data : will be passed to TCS.
out vec3 position_vs;
out vec3 normal_vs;
out vec3 eye_vs;
out vec3 light_vs;
out vec2 uv_vs;

// Uniform values that stay constant for the whole mesh.
uniform mat4 M;
uniform mat4 V;

uniform vec3 LightPosition_worldspace;
uniform float time;

void main(){
    gl_Position = M * vec4(vertexPosition_modelspace, 1);
    position_vs = (M * vec4(vertexPosition_modelspace, 1)).xyz;

    normal_vs = (V * M * vec4(vertexNormal_modelspace, 1)).xyz;

    vec3 vertexPosition_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;
    eye_vs = vec3(0, 0, 0) - vertexPosition_cameraspace;

    vec3 LightPosition_cameraspace = (V * vec4(LightPosition_worldspace, 1)).xyz;
    light_vs = LightPosition_cameraspace + eye_vs;

    vec2 texOffset = vec2(0, 0);
    float texScale = 10;
    uv_vs = (position_vs.xz + texOffset + (time * 0.01))/texScale;
}
